#include <opencv2/opencv.hpp>
#include <opencv2/features2d.hpp>
#include <opencv2/xfeatures2d.hpp>
#include <iostream>
#include <vector>
#include <fstream>
//#include <darknet.h>
using namespace std;
using namespace cv::dnn::dnn4_v20210608;

int main(){
	
	cv::FileStorage fsr("calibration.xml", cv::FileStorage::READ);
	
	cv::Mat distCoeff_left, cameraMatrix_left;
	cv::Mat distCoeff_right, cameraMatrix_right;

	cv::Mat T;
	fsr["translationVector"] >> T;
	fsr["leftCameraDistCoeff"] >> distCoeff_left;
	fsr["leftCameraMatrix"] >> cameraMatrix_left;
	fsr["rightCameraDistCoeff"] >> distCoeff_right;
	fsr["rightCameraMatrix"] >> cameraMatrix_right;

	ofstream fp;
	//fp.open("40cm_right.txt");

	string path = "../resources/a";
	vector<cv::String> images;
	cv::glob(path, images);

	cv::Ptr<cv::Feature2D> fast = cv::FastFeatureDetector::create();
	cv::Ptr<cv::Feature2D> brief = cv::xfeatures2d::BriefDescriptorExtractor::create();
	cv::Ptr<cv::DescriptorMatcher> matcher = cv::BFMatcher::create(cv::NORM_HAMMING, true);
	
	cv::Mat img, gray, pic[2], dc[2], output;
	vector<cv::KeyPoint> kp[2];
	vector<cv::DMatch> matches;

	cv::Mat mat1, mat2;
	mat1 = cameraMatrix_left.inv();
	mat2 = cameraMatrix_right.inv();
	
	for(int i = 0; i < images.size(); i++){
		img = cv::imread(images[i]);
		cv::cvtColor(img, gray, cv::COLOR_RGB2GRAY);

		pic[0] = gray(cv::Range::all(), cv::Range(0, gray.cols/2));
		pic[1] = gray(cv::Range::all(), cv::Range(gray.cols/2, gray.cols));
		
		for(int j = 0; j < 2; j++){
			fast->detect(pic[j], kp[j]);
			brief->compute(pic[j], kp[j], dc[j]);
		}
		matcher->match(dc[0], dc[1], matches);
		
		for(int k = 0; k < matches.size(); k++){
			cout<<matches[k].queryIdx<<' '<<matches[k].trainIdx<<'\n';
			vector<cv::DMatch> ma;
			ma.push_back(matches[k]);
			cv::drawMatches(pic[0], kp[0], pic[1], kp[1], ma, output, None, None, None, cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);
			cv::imshow("test", output);
			cv::waitKey(0);
		}
		cv::drawMatches(pic[0], kp[0], pic[1], kp[1], matches, output, cv::Scalar::all(-1), cv::Scalar::all(-1), vector<char>(), cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS);

		cv::imshow("test", output);
		cv::waitKey(0);
	}

	return 0;
}
